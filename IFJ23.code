# IFJ dlya liudiej bez lichnoi zhizni
.IFJcode23
JUMP $$main

# Write function
LABEL $%write
WRITE LF@%param
RETURN
# end of write ---------

# Int2Double function
LABEL $%int2float
PUSHFRAME
DEFVAR LF@%retval
INT2FLOAT LF@%retval LF@%param
POPFRAME
RETURN
# end of int2float ---------

# Double2Int function
LABEL $%double2int
PUSHFRAME
DEFVAR LF@%retval
FLOAT2INT LF@%retval LF@%param
POPFRAME
RETURN
# end of double2int ---------

# Length function
LABEL $%length
PUSHFRAME
DEFVAR LF@%retval
STRLEN LF@%retval LF@%param
POPFRAME
RETURN
# end of length ---------

# ReadString function
LABEL $%readString
CREATEFRAME
PUSHFRAME
DEFVAR LF@%retval
DEFVAR LF@%string_tmp
DEFVAR LF@%bool
DEFVAR LF@%len
READ LF@%string_tmp string
STRLEN LF@%len LF@%string_tmp
EQ LF@%bool LF@%len int@0
JUMPIFEQ $%eq_to_zero_readstring LF@%bool bool@true
MOVE LF@%retval LF@%string_tmp
JUMP $%readString_end
LABEL $%eq_to_zero_readstring
MOVE LF@%retval nil@nil
LABEL $%readString_end
POPFRAME
RETURN
# end of readString ---------

# Ord function
LABEL $%ord
PUSHFRAME
DEFVAR LF@%retval
DEFVAR LF@%strlen
STRLEN LF@%strlen LF@%param
DEFVAR LF@%bool
EQ LF@%bool LF@%strlen int@0
JUMPIFEQ $%eq_to_zero LF@%bool bool@true
STRI2INT LF@%retval LF@%param int@0
JUMP $%ord_end
LABEL $%eq_to_zero
MOVE LF@%retval int@0
LABEL $%ord_end
POPFRAME
RETURN
# end of ord ---------


LABEL $$main
DEFVAR GF@%%retval_main
DEFVAR GF@?temp_1
DEFVAR GF@?temp_2
DEFVAR GF@&str
MOVE GF@&str string@
CREATEFRAME
PUSHFRAME
JUMP **main_declares**
LABEL **main_declares_return**
DEFVAR GF@%%res

DEFVAR GF@outerCounter_0
PUSHS int@0
POPS GF@outerCounter_0
CLEARS

DEFVAR GF@innerCounter_0
PUSHS int@0
POPS GF@innerCounter_0
CLEARS


# while {
LABEL $WHILE_START_d0_c0
PUSHS GF@outerCounter_0
PUSHS int@5
LTS

# while (res) 
POPS GF@%%res
JUMPIFNEQ $WHILE_END_d0_c0 GF@%%res bool@true
# }


# write(...)
WRITE string@Outer\032Counter:

# write(...)
WRITE GF@outerCounter_0

# write(...)
WRITE string@\010

# while {
LABEL $WHILE_START_d1_c0
PUSHS GF@innerCounter_0
PUSHS int@3
LTS

# while (res) 
POPS GF@%%res
JUMPIFNEQ $WHILE_END_d1_c0 GF@%%res bool@true
# }


# write(...)
WRITE string@Inner\032Counter:

# write(...)
WRITE GF@innerCounter_0

# write(...)
WRITE string@\010
PUSHS int@1
PUSHS GF@innerCounter_0
ADDS
POPS GF@innerCounter_0
CLEARS

JUMP $WHILE_START_d1_c0
# }

LABEL $WHILE_END_d1_c0
PUSHS int@0
POPS GF@innerCounter_0
CLEARS


# while {
LABEL $WHILE_START_d1_c1
PUSHS GF@innerCounter_0
PUSHS int@3
LTS

# while (res) 
POPS GF@%%res
JUMPIFNEQ $WHILE_END_d1_c1 GF@%%res bool@true
# }


# write(...)
WRITE string@Inner\032Counter:

# write(...)
WRITE GF@innerCounter_0

# write(...)
WRITE string@\010
PUSHS int@1
PUSHS GF@innerCounter_0
ADDS
POPS GF@innerCounter_0
CLEARS

JUMP $WHILE_START_d1_c1
# }

LABEL $WHILE_END_d1_c1
PUSHS int@0
POPS GF@innerCounter_0
CLEARS

PUSHS int@1
PUSHS GF@outerCounter_0
ADDS
POPS GF@outerCounter_0
CLEARS

JUMP $WHILE_START_d0_c0
# }

LABEL $WHILE_END_d0_c0
LABEL **main**

# EXIT 
POPFRAME
EXIT int@0


LABEL **main_declares**
JUMP **main_declares_return**
