[STMT_LIST] ::= [STMT] [STMT_LIST_TAIL]
[STMT_LIST] ::= ''

[STMT_LIST_TAIL] ::= [STMT] [STMT_LIST_TAIL]
[STMT_LIST_TAIL] ::= ''
[STMT_LIST_TAIL] ::= = [ASSIGN_STMT]

[STMT] ::= while [WHILE_EXP] { [STMT_LIST] }
[STMT] ::= if [IF_EXP] { [STMT_LIST] } [ELSE]
[STMT] ::= [KWRD_STMT]
[STMT] ::= [ASSIGN_STMT]
[STMT] ::= [FUNC_DECL]
[STMT] ::= return [EXP]


[WHILE_EXP] ::= ( [EXP] [MB_WHILE_EXP] )

[MB_WHILE_EXP] ::= [COMP_OP] [EXP]
[MB_WHILE_EXP] ::= ''


[IF_EXP] ::= ( [EXP] [MB_IF_EXP] )
[IF_EXP] ::= let id [MB_IF_EXP]

[MB_IF_EXP] ::= [COMP_OP] [EXP] 
[MB_IF_EXP] ::= ''

[ELSE] ::= else { [STMT_LIST] }

[KWRD_STMT] ::= let id [MB_STMT_LET]
[KWRD_STMT] ::= var id [MB_STMT_LET]

[ASSIGN_STMT] ::= id [MB_ASSIGN_STMT]

[MB_ASSIGN_STMT] ::= = [EXP]


[MB_STMT_LET] ::= : [TYPE]
[MB_STMT_LET] ::= = [EXP]


[COMP_OP] ::= ==
[COMP_OP] ::= !=
[COMP_OP] ::= >
[COMP_OP] ::= >=
[COMP_OP] ::= <
[COMP_OP] ::= <=

[TYPE] ::= String
[TYPE] ::= Int
[TYPE] ::= Double
[TYPE] ::= String?
[TYPE] ::= Int?
[TYPE] ::= Double?
[TYPE] ::= ''

[EXP] ::= [T] [EXP_LIST]

[EXP_LIST] ::= + [T] [EXP_LIST]
[EXP_LIST] ::= - [T] [EXP_LIST]
[EXP_LIST] ::= ''

[T] ::= [FAC] [T_LIST]

[T_LIST] ::= * [FAC] [T_LIST]
[T_LIST] ::= / [FAC] [T_LIST]
[T_LIST] ::= ''

[FAC] ::= ( [EXP] )

[FAC] ::= id [FAC_TAIL]

[FAC_TAIL] ::= [FUNC_CALL]
[FAC_TAIL] ::= ''



[FUNC_CALL] ::= ( [ARG_LIST] )

[ARG_LIST] ::= [EXP] [ARG_LIST_REST]
[ARG_LIST] ::= ''

[ARG_LIST_REST] ::= , [EXP] [ARG_LIST_REST]
[ARG_LIST_REST] ::= ''


[FUNC_DECL] ::= func id ( [PARAM_LIST] ) -> [TYPE] { [STMT_LIST] }


[PARAM_PREFIX] ::= ''
[PARAM_PREFIX] ::= with
[PARAM_PREFIX] ::= of
[PARAM_PREFIX] ::= by
[PARAM_PREFIX] ::= _
[PARAM_LIST] ::= [PARAM] [PARAM_LIST_REST]
[PARAM_LIST] ::= ''



[PARAM_LIST_REST] ::= , [PARAM] [PARAM_LIST_REST]
[PARAM_LIST_REST] ::= ''

[PARAM] ::= [PARAM_PREFIX] [PARAM_NAME] : [TYPE]

[PARAM_NAME] ::= id